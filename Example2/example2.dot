digraph callgraph {
"int fd" [color=blue];
"int *err" [color=blue];
"int *fput_needed" [color=blue];
"data 1{fd, *err, *fput_needed}"[style=dotted];

"int fd" -> "data 1{fd, *err, *fput_needed}";
"int *err" -> "data 1{fd, *err, *fput_needed}";
"int *fput_needed" -> "data 1{fd, *err, *fput_needed}";

"data 1{fd, *err, *fput_needed}"->"Task A (convertSocketFromIntToStruct)"  [label="data 1", style=dotted];


"int level" [color=blue];
"int optname" [color=blue];
"void *optval" [color=blue];
"int optlen" [color=blue];
"data 2{socket, level, optname, *optval, optlen}" [style=dotted];

"Task A (convertSocketFromIntToStruct)" -> "data 2{socket, level, optname, *optval, optlen}"  [label="struct socket"];
"int level" -> "data 2{socket, level, optname, *optval, optlen}";
"int optname" -> "data 2{socket, level, optname, *optval, optlen}";
"void *optval" -> "data 2{socket, level, optname, *optval, optlen}";
"int optlen" -> "data 2{socket, level, optname, *optval, optlen}";
"data 2{socket, level, optname, *optval, optlen}" -> "Task B (checkProtocolDependency)"  [label="data 2", style=dotted];


"data 3{socket->sock, level, optname, *optval, optlen}" [style=dotted];
"Task B (checkProtocolDependency)" -> "data 3{socket->sock, level, optname, *optval, optlen}"  [label="struct socket->sock"];
"int level" -> "data 3{socket->sock, level, optname, *optval, optlen}";
"int optname" -> "data 3{socket->sock, level, optname, *optval, optlen}";
"void *optval" -> "data 3{socket->sock, level, optname, *optval, optlen}";
"int optlen" -> "data 3{socket->sock, level, optname, *optval, optlen}";
"data 3{socket->sock, level, optname, *optval, optlen}" -> "Task C (doProtocolDependentOperations)" [label="data 3", style=dotted];
"data 3{socket->sock, level, optname, *optval, optlen}" -> "Task D (ipSocketLevelOperation)" [label="data 3", style=dotted];


"data 4{socket->sock, optname, *optval, optlen}" [style=dotted];
"Task D (ipSocketLevelOperation)" -> "data 4{socket->sock, optname, *optval, optlen}" [label="socket->sock"];
"int optname" -> "data 4{socket->sock, optname, *optval, optlen}";
"void *optval" -> "data 4{socket->sock, optname, *optval, optlen}";
"int optlen" -> "data 4{socket->sock, optname, *optval, optlen}";
"data 4{socket->sock, optname, *optval, optlen}" -> "Task E (callGetSetOpt)" [label="socket->sock"];


"data 5{net,  *optval (user), optlen (len)}" [style=dotted];
"Task E (callGetSetOpt)" -> "data 5{net,  *optval (user), optlen (len)}"  [label="struct net"];
"void *optval" -> "data 5{net,  *optval (user), optlen (len)}"
"int optlen" -> "data 5{net,  *optval (user), optlen (len)}"
"data 5{net,  *optval (user), optlen (len)}"-> "Task F (copyDataFromUserToKernel)" [label="data 5", style=dotted];


"data 6{net,  *optval (user), optlen (len), compat}" [style=dotted];
"int compat"[color=blue];
"int compat" -> "data 6{net,  *optval (user), optlen (len), compat}";
"void *optval" -> "data 6{net,  *optval (user), optlen (len), compat}";
"int optlen" -> "data 6{net,  *optval (user), optlen (len), compat}";
"data 5{net,  *optval (user), optlen (len)}" -> "data 6{net,  *optval (user), optlen (len), compat}" [label="struct net", style=dotted];

"data 6{net,  *optval (user), optlen (len), compat}" -> "Task G (doAddcounter)" [label="data 6",style=dotted];

"data 7{net,  newinfo, entry0, repl}"[style=dotted];
"struct xt_table_info newinfo" [color=blue];
"void *entry0" [color=blue];
"struct ipt_replace repl" [color=blue];
"Task F (copyDataFromUserToKernel)" -> "data 7{net,  newinfo, entry0, repl}" [label="struct net"];
"struct xt_table_info newinfo" -> "data 7{net,  newinfo, entry0, repl}" 
"void *entry0" -> "data 7{net,  newinfo, entry0, repl}" 
"struct ipt_replace repl" -> "data 7{net,  newinfo, entry0, repl}" 
"data 7{net,  newinfo, entry0, repl}" -> "Task H (translateIptable)" [label="data 7", style=dotted];

"data 8{net,  name, valid_hooks, newinfo, num_counters, counters_ptr}" [style=dotted];
"char *name" [color=blue];
"int valid_hooks" [color=blue];
"int num_counters" [color=blue];
"void __user *counters_ptr" [color=blue];

"Task H (translateIptable)" -> "data 8{net,  name, valid_hooks, newinfo, num_counters, counters_ptr}"  [label="struct xt_table_info newinfo"];
"char *name" -> "data 8{net,  name, valid_hooks, newinfo, num_counters, counters_ptr}" ;
"int valid_hooks"-> "data 8{net,  name, valid_hooks, newinfo, num_counters, counters_ptr}" ;
"int num_counters" -> "data 8{net,  name, valid_hooks, newinfo, num_counters, counters_ptr}";
"void __user *counters_ptr" -> "data 8{net,  name, valid_hooks, newinfo, num_counters, counters_ptr}";
"data 7{net,  newinfo, entry0, repl}"  -> "data 8{net,  name, valid_hooks, newinfo, num_counters, counters_ptr}" [label="struct net", style=dotted];


}


